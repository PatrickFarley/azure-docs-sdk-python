### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.communication.chat.aio.ChatThreadClient.add_members
  - azure.communication.chat.aio.ChatThreadClient.close
  - azure.communication.chat.aio.ChatThreadClient.delete_message
  - azure.communication.chat.aio.ChatThreadClient.get_message
  - azure.communication.chat.aio.ChatThreadClient.list_members
  - azure.communication.chat.aio.ChatThreadClient.list_messages
  - azure.communication.chat.aio.ChatThreadClient.list_read_receipts
  - azure.communication.chat.aio.ChatThreadClient.remove_member
  - azure.communication.chat.aio.ChatThreadClient.send_message
  - azure.communication.chat.aio.ChatThreadClient.send_read_receipt
  - azure.communication.chat.aio.ChatThreadClient.send_typing_notification
  - azure.communication.chat.aio.ChatThreadClient.thread_id
  - azure.communication.chat.aio.ChatThreadClient.update_message
  - azure.communication.chat.aio.ChatThreadClient.update_thread
  class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Creating the ChatThreadClient.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from datetime\
    \ import datetime\n   from azure.communication.chat.aio import ChatClient, CommunicationUserCredential\n\
    \   from azure.communication.chat import ChatThreadMember, CommunicationUser\n\
    \n   chat_client = ChatClient(self.endpoint, CommunicationUserCredential(self.token))\n\
    \n   async with chat_client:\n       topic = \"test topic\"\n       members =\
    \ [ChatThreadMember(\n           user=self.user,\n           display_name='name',\n\
    \           share_history_time=datetime.utcnow()\n       )]\n       chat_thread_client\
    \ = await chat_client.create_chat_thread(topic, members)\n\n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.communication.chat.aio
  name: ChatThreadClient
  summary: 'A client to interact with the AzureCommunicationService Chat gateway.

    Instances of this class is normally created by ChatClient.create_chat_thread()


    This client provides operations to add member to chat thread, remove member from

    chat thread, send message, delete message, update message, send typing notifications,

    send and list read receipt'
  syntax:
    content: 'ChatThreadClient(endpoint: str, credential: azure.communication.chat._shared.user_credential_async.CommunicationUserCredential,
      thread_id: str, **kwargs) -> None'
    parameters:
    - description: The endpoint of the Azure Communication resource.
      id: endpoint
      type:
      - str
    - description: 'The credentials with which to authenticate. The value contains
        a User

        Access Token'
      id: credential
      type:
      - CommunicationUserCredential
    - description: The unique thread id.
      id: thread_id
      type:
      - str
    variables:
    - description: Chat thread id.
      id: thread_id
      type:
      - str
  type: class
  uid: azure.communication.chat.aio.ChatThreadClient
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Adding members to chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatThreadMember, CommunicationUser\n   from datetime import datetime\n\
    \   new_member = ChatThreadMember(\n           user=self.new_user,\n         \
    \  display_name='name',\n           share_history_time=datetime.utcnow())\n  \
    \ members = [new_member]\n   await chat_thread_client.add_members(members)\n\n\
    \   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.add_members
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'add_members(thread_members: typing.List[azure.communication.chat._models.ChatThreadMember],
    **kwargs) -> None'
  namewithoutparameters: add_members
  summary: Adds thread members to a thread. If members already exist, no change occurs.
  syntax:
    content: 'add_members(thread_members: typing.List[azure.communication.chat._models.ChatThreadMember],
      **kwargs) -> None'
    parameters:
    - description: Required. Thread members to be added to the thread.
      id: thread_members
      isRequired: true
      type:
      - list[azure.communication.chat.ChatThreadMember]
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.add_members
- class: azure.communication.chat.aio.ChatThreadClient
  fullName: azure.communication.chat.aio.ChatThreadClient.close
  langs:
  - python
  module: azure.communication.chat.aio
  name: close() -> None
  namewithoutparameters: close
  syntax:
    content: close() -> None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.close
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Deleting a messages.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await chat_thread_client.delete_message(self._message_id)\n\
    \n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.delete_message
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'delete_message(message_id: str, **kwargs) -> None'
  namewithoutparameters: delete_message
  summary: Deletes a message.
  syntax:
    content: 'delete_message(message_id: str, **kwargs) -> None'
    parameters:
    - description: Required. The message id.
      id: message_id
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.delete_message
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Getting a message by message id.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   chat_message =\
    \ await chat_thread_client.get_message(self._message_id)\n\n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.get_message
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'get_message(message_id: str, **kwargs) -> azure.communication.chat._models.ChatMessage'
  namewithoutparameters: get_message
  summary: Gets a message by id.
  syntax:
    content: 'get_message(message_id: str, **kwargs) -> azure.communication.chat._models.ChatMessage'
    parameters:
    - description: Required. The message id.
      id: message_id
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: ChatMessage, or the result of cls(response)
      type:
      - azure.communication.chat.ChatMessage
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.get_message
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Listing members of chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   chat_thread_members\
    \ = chat_thread_client.list_members()\n   print(\"list_members succeeded, members:\"\
    )\n   async for chat_thread_member in chat_thread_members:\n       print(chat_thread_member)\n\
    \n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.list_members
  langs:
  - python
  module: azure.communication.chat.aio
  name: list_members(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ChatThreadMember]
  namewithoutparameters: list_members
  summary: Gets the members of a thread.
  syntax:
    content: list_members(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ChatThreadMember]
    parameters:
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: AsyncItemPaged[<xref:azure.communication.chat.ChatThreadMember>]
      type:
      - azure.core.async_paging.AsyncItemPaged
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.list_members
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Listing messages of a chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n   start_time = datetime.utcnow() - timedelta(days=1)\n\
    \   chat_messages = chat_thread_client.list_messages(results_per_page=1, start_time=start_time)\n\
    \   print(\"list_messages succeeded with results_per_page is 1, and start time\
    \ is yesterday UTC\")\n   async for chat_message_page in chat_messages.by_page():\n\
    \       l = [ i async for i in chat_message_page]\n       print(\"page size: \"\
    , len(l))\n\n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.list_messages
  langs:
  - python
  module: azure.communication.chat.aio
  name: list_messages(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ChatMessage]
  namewithoutparameters: list_messages
  summary: Gets a list of messages from a thread.
  syntax:
    content: list_messages(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ChatMessage]
    parameters:
    - description: The maximum number of messages to be returned per page.
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: The start time where the range query.
      id: start_time
      isRequired: true
      type:
      - datetime.datetime
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: AsyncItemPaged[<xref:azure.communication.chat.ChatMessage>]
      type:
      - azure.core.async_paging.AsyncItemPaged
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.list_messages
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Listing read receipts.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   read_receipts\
    \ = chat_thread_client.list_read_receipts()\n\n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.list_read_receipts
  langs:
  - python
  module: azure.communication.chat.aio
  name: list_read_receipts(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ReadReceipt]
  namewithoutparameters: list_read_receipts
  summary: Gets read receipts for a thread.
  syntax:
    content: list_read_receipts(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ReadReceipt]
    parameters:
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: AsyncItemPaged[<xref:azure.communication.chat.ReadReceipt>]
      type:
      - azure.core.async_paging.AsyncItemPaged
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.list_read_receipts
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Removing member from chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await chat_thread_client.remove_member(self.new_user)\n\
    \n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.remove_member
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'remove_member(user: azure.communication.chat._shared.models.CommunicationUser,
    **kwargs) -> None'
  namewithoutparameters: remove_member
  summary: Remove a member from a thread.
  syntax:
    content: 'remove_member(user: azure.communication.chat._shared.models.CommunicationUser,
      **kwargs) -> None'
    parameters:
    - description: Required. User identity of the thread member to remove from the
        thread.
      id: user
      isRequired: true
      type:
      - azure.communication.chat.CommunicationUser
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.remove_member
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Sending a message.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatMessagePriority\n\n   priority=ChatMessagePriority.NORMAL\n   content='hello\
    \ world'\n   sender_display_name='sender name'\n\n   send_message_result = await\
    \ chat_thread_client.send_message(\n       content,\n       priority=priority,\n\
    \       sender_display_name=sender_display_name)\n\n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.send_message
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'send_message(content: str, **kwargs) -> azure.communication.chat._generated.models._models_py3.SendChatMessageResult'
  namewithoutparameters: send_message
  summary: Sends a message to a thread.
  syntax:
    content: 'send_message(content: str, **kwargs) -> azure.communication.chat._generated.models._models_py3.SendChatMessageResult'
    parameters:
    - description: Required. Chat message content.
      id: content
      isRequired: true
      type:
      - str
    - description: Message priority.
      id: priority
      isRequired: true
      type:
      - str
      - ChatMessagePriority
    - description: 'The display name of the message sender. This property is used
        to

        populate sender name for push notifications.'
      id: sender_display_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: SendChatMessageResult, or the result of cls(response)
      type:
      - azure.communication.chat.SendChatMessageResult
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.send_message
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Sending read receipt of a chat message.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await chat_thread_client.send_read_receipt(self._message_id)\n\
    \n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.send_read_receipt
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'send_read_receipt(message_id: str, **kwargs) -> None'
  namewithoutparameters: send_read_receipt
  summary: Posts a read receipt event to a thread, on behalf of a user.
  syntax:
    content: 'send_read_receipt(message_id: str, **kwargs) -> None'
    parameters:
    - description: Required. Id of the latest message read by current user.
      id: message_id
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.send_read_receipt
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Sending typing notification.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await chat_thread_client.send_typing_notification()\n\
    \n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.send_typing_notification
  langs:
  - python
  module: azure.communication.chat.aio
  name: send_typing_notification(**kwargs) -> None
  namewithoutparameters: send_typing_notification
  summary: Posts a typing event to a thread, on behalf of a user.
  syntax:
    content: send_typing_notification(**kwargs) -> None
    parameters:
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.send_typing_notification
- class: azure.communication.chat.aio.ChatThreadClient
  fullName: azure.communication.chat.aio.ChatThreadClient.thread_id
  langs:
  - python
  module: azure.communication.chat.aio
  name: thread_id
  summary: Gets the thread id from the client.
  syntax:
    return:
      type:
      - str
  type: attribute
  uid: azure.communication.chat.aio.ChatThreadClient.thread_id
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Updating a sent messages.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   content = \"updated\
    \ message content\"\n   await chat_thread_client.update_message(self._message_id,\
    \ content=content)\n\n   ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.update_message
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'update_message(message_id: str, *, content: str = None, **kwargs) -> None'
  namewithoutparameters: update_message
  summary: Updates a message.
  syntax:
    content: 'update_message(message_id: str, *, content: str = None, **kwargs) ->
      None'
    parameters:
    - description: Required. The message id.
      id: message_id
      isRequired: true
      type:
      - str
    - description: Chat message content.
      id: content
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.update_message
- class: azure.communication.chat.aio.ChatThreadClient
  example:
  - "Updating chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-communication-chat-1.0.0b1\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   topic = \"updated\
    \ thread topic\"\n   await chat_thread_client.update_thread(topic=topic)\n\n \
    \  ````\n"
  fullName: azure.communication.chat.aio.ChatThreadClient.update_thread
  langs:
  - python
  module: azure.communication.chat.aio
  name: 'update_thread(*, topic: str = None, **kwargs) -> None'
  namewithoutparameters: update_thread
  summary: Updates a thread's properties.
  syntax:
    content: 'update_thread(*, topic: str = None, **kwargs) -> None'
    parameters:
    - description: 'Thread topic. If topic is not specified, the update will succeeded
        but

        chat thread properties will not be changed.'
      id: topic
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.communication.chat.aio.ChatThreadClient.update_thread
references:
- fullName: azure.communication.chat.aio.ChatThreadClient.add_members
  isExternal: false
  name: 'add_members(thread_members: typing.List[azure.communication.chat._models.ChatThreadMember],
    **kwargs) -> None'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.add_members
- fullName: azure.communication.chat.aio.ChatThreadClient.close
  isExternal: false
  name: close() -> None
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.close
- fullName: azure.communication.chat.aio.ChatThreadClient.delete_message
  isExternal: false
  name: 'delete_message(message_id: str, **kwargs) -> None'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.delete_message
- fullName: azure.communication.chat.aio.ChatThreadClient.get_message
  isExternal: false
  name: 'get_message(message_id: str, **kwargs) -> azure.communication.chat._models.ChatMessage'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.get_message
- fullName: azure.communication.chat.aio.ChatThreadClient.list_members
  isExternal: false
  name: list_members(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ChatThreadMember]
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.list_members
- fullName: azure.communication.chat.aio.ChatThreadClient.list_messages
  isExternal: false
  name: list_messages(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ChatMessage]
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.list_messages
- fullName: azure.communication.chat.aio.ChatThreadClient.list_read_receipts
  isExternal: false
  name: list_read_receipts(**kwargs) -> azure.core.async_paging.AsyncItemPaged[azure.communication.chat._models.ReadReceipt]
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.list_read_receipts
- fullName: azure.communication.chat.aio.ChatThreadClient.remove_member
  isExternal: false
  name: 'remove_member(user: azure.communication.chat._shared.models.CommunicationUser,
    **kwargs) -> None'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.remove_member
- fullName: azure.communication.chat.aio.ChatThreadClient.send_message
  isExternal: false
  name: 'send_message(content: str, **kwargs) -> azure.communication.chat._generated.models._models_py3.SendChatMessageResult'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.send_message
- fullName: azure.communication.chat.aio.ChatThreadClient.send_read_receipt
  isExternal: false
  name: 'send_read_receipt(message_id: str, **kwargs) -> None'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.send_read_receipt
- fullName: azure.communication.chat.aio.ChatThreadClient.send_typing_notification
  isExternal: false
  name: send_typing_notification(**kwargs) -> None
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.send_typing_notification
- fullName: azure.communication.chat.aio.ChatThreadClient.thread_id
  isExternal: false
  name: thread_id
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.thread_id
- fullName: azure.communication.chat.aio.ChatThreadClient.update_message
  isExternal: false
  name: 'update_message(message_id: str, *, content: str = None, **kwargs) -> None'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.update_message
- fullName: azure.communication.chat.aio.ChatThreadClient.update_thread
  isExternal: false
  name: 'update_thread(*, topic: str = None, **kwargs) -> None'
  parent: azure.communication.chat.aio.ChatThreadClient
  uid: azure.communication.chat.aio.ChatThreadClient.update_thread
- fullName: list[azure.communication.chat.ChatThreadMember]
  name: list[ChatThreadMember]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.communication.chat.ChatThreadMember
    name: ChatThreadMember
    uid: azure.communication.chat.ChatThreadMember
  - fullName: ']'
    name: ']'
  uid: list[azure.communication.chat.ChatThreadMember]
